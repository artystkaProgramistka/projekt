import java_cup.runtime.Symbol;

parser code {:
  // Można dodać metody pomocnicze, np. do debugowania
:};

/* Deklaracje terminali (tokenów) */
terminal PLUS, MINUS, MUL, DIV, EXP, LPAREN, RPAREN;
terminal Double NUMBER;

/*
   Definiujemy cztery nieterminale dla czterech poziomów priorytetu:
   - expr (najwyższy poziom: +, -)
   - term (średni poziom: *, /)
   - power (poziom dla potęgowania: **)
   - factor (najniższy poziom: nawiasy i liczby)
*/
nonterminal Double expr, term, power, factor;

/* expr: odpowiada za + i - */
expr ::=
    expr:e PLUS term:t
      {: RESULT = e + t; :}
  | expr:e MINUS term:t
      {: RESULT = e - t; :}
  | term:t
      {: RESULT = t; :}
  ;

/* term: odpowiada za * i / */
term ::=
    term:t MUL power:p
      {: RESULT = t * p; :}
  | term:t DIV power:p
      {:
        if (p == 0.0) {
          System.err.println("Błąd: dzielenie przez zero!");
          RESULT = 0.0;
        } else {
          RESULT = t / p;
        }
      :}
  | power:p
      {: RESULT = p; :}
  ;

/* power: odpowiada za potęgowanie (**) */
power ::=
    factor:f EXP power:p
      {: RESULT = Math.pow(f, p); :}  /* Right-associative rule */
  | factor:f
      {: RESULT = f; :}
  ;

/* factor: liczba lub wyrażenie w nawiasach */
factor ::=
    LPAREN expr:e RPAREN
      {: RESULT = e; :}
  | NUMBER:n
      {: RESULT = n; :}
  ;
